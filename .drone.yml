---
kind: pipeline
name: build-image
type: docker
clone:
  disable: true

environment:
  OPENMINA_BRANCH: openmina-legacy-snark-workers

steps:

- name: clone
  image: alpine/git
  commands:
  - git clone $${MINA_REPO:-https://github.com/MinaProtocol/mina} --depth 1 -b $${MINA_BRANCH:-develop} .

- name: prepare-dockerfiles
  image: busybox:latest
  commands:
  - wget https://github.com/openmina/mina/raw/$${OPENMINA_BRANCH}/dockerfiles/stages/99-openmina-tail -O dockerfiles/stages/99-openmina-tail
  - sed -i -e "s/zlib1g-dev/zlib1g-dev jq/" dockerfiles/stages/1-build-deps
  - for f in 1-build-deps 2-opam-deps 3-builder 99-openmina-tail; do cat dockerfiles/stages/$$f; done > ./dockerfiles/stages/merged
  - echo "!dockerfiles/scripts/healthcheck-utilities.sh" >> .dockerignore

- name: publish-image
  image: plugins/docker
  settings:
    build_args:
    - MINA_BRANCH=${MINA_BRANCH:-develop}
    - MINA_REPO=${MINA_REPO:-https://github.com/MinaProtocol/mina}
    dockerfile: ./dockerfiles/stages/merged
    password:
      from_secret: docker_hub_password
    repo: openmina/mina
    tags:
    - mina-daily-${MINA_BRANCH:-develop}-${DRONE_BUILD_NUMBER}
    - mina-daily-${MINA_BRANCH:-develop}-latest
    username:
      from_secret: docker_hub_username
    cache_from: ${CACHE_IMAGE}

---
kind: pipeline
name: deploy-to-cluster
type: docker
clone:
  disable: true
depends_on:
- build-image


environment:
  # path to openmina tooling
  OM: helm/openmina-config
  # target height to wait for after deployment
  TARGET_HEIGHT: 8
  # resource to wait for status when deploying Mina seeds
  SEEDS_WAIT_RESOURCE: deployment/seed1
  # timeout to wait when deploying Mina seeds
  SEEDS_WAIT_TIMEOUT: 10m
  # resource to wait for status when deploying Mina nodes
  NODES_WAIT_RESOURCE: deployment/node1
  # timeout to wait when deploying Mina nodes
  NODES_WAIT_TIMEOUT: 15m
  # retries to check all nodes to be at the same level
  HEIGHT_WAIT_RETRIES: 20
  # period to wait before retrying
  HEIGHT_WAIT_PERIOD: 15

defs:
- &log
  image: alpine/k8s:1.26.1
  detach: true
  environment:
    KUBECONFIG: kube-config
  commands:
  - while ! kubectl logs deployment/$${NAME} --container mina --follow; do echo "waiting for $${NAME} to start..."; sleep 10; done

steps:

- name: clone
  image: alpine/git
  commands:
  - git clone $${OPENMINA_REPO:-https://github.com/openmina/mina} --depth 1 -b $${OPENMINA_BRANCH:-openmina-legacy-snark-workers} .

- name: prepare-kubeconfig
  image: alpine/k8s:1.26.1
  environment:
    DRONE_KUBECONFIG:
      from_secret: k8s_config
    KUBECONFIG: kube-config
  commands:
  - umask 0077
  - echo "$DRONE_KUBECONFIG" > $${KUBECONFIG}
  - kubectl config set-context --current --namespace $${NAMESPACE:-testnet}

- name: deployment-info
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - PORT="$$($${OM}/kube-utils.sh frontend-port $${NAMESPACE:-testnet})"
  - 'echo "Frontend: http://1.k8.openmina.com:$PORT"'
  - 'echo "Namespace: $${NAMESPACE:-testnet}"'

- name: delete-old-testnet
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - $${OM}/deploy.sh delete --all --force
  - sleep 10
  - |
    PODS="$$($${OM}/kube-utils.sh mina-pods)"
    if [ -n "$${PODS}" ]; then
        echo "Workaround for pods left running, force-delete pods $$PODS"
        kubectl delete --force pods $${PODS} || true
    fi

- name: prepare-deamon-json
  image: alpine/k8s:1.26.1
  commands:
  - $${OM}/generate-conf-file.sh --slot-duration=$${SLOT_DURATION:-180} $${SLOTS_PER_EPOCH:+--slots-per-epoch=$${SLOTS_PER_EPOCH}} > $${OM}/resources/daemon.json

- name: log-seed
  <<: *log
  environment:
    NAME: seed1

- name: deploy-seeds
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - export MINA_IMAGE=openmina/mina:mina-daily-$${MINA_BRANCH:-develop}-${DRONE_BUILD_NUMBER}
  - $${OM}/deploy.sh deploy --seeds --force -- $${HELM_ARGS}

- name: seeds-are-ready
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - kubectl wait $${SEEDS_WAIT_RESOURCE} --for=condition=Available --timeout=$${SEEDS_WAIT_TIMEOUT}

- name: log-node
  <<: *log
  environment:
    NAME: node1

- name: log-producer
  <<: *log
  environment:
    NAME: node1

- name: log-snarker
  <<: *log
  environment:
    NAME: snarker

- name: deploy-nodes
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - export MINA_IMAGE="openmina/mina:mina-daily-$${MINA_BRANCH:-develop}-${DRONE_BUILD_NUMBER}"
  - $${OM}/deploy.sh deploy --producers --nodes --force -- $${HELM_ARGS}
  - $${OM}/deploy.sh deploy --snark-workers --force -- --set=workerReplicas="$${SNARK_WORKERS:-96}" $${HELM_ARGS}
  - $${OM}/update-frontend.sh -- --set=isVanilla=true

- name: testnet-is-ready
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - $${OM}/kube-utils.sh mina-testnet-available $${NODES_WAIT_TIMEOUT}
  - $${OM}/kube-utils.sh mina-testnet-same-height $${HEIGHT_WAIT_RETRIES} $${HEIGHT_WAIT_PERIOD}

---

kind: pipeline
name: split-network
type: docker
clone:
  disable: true
depends_on: [ deploy-to-cluster ]

environment:
  # retries to check all nodes to be at the same level
  HEIGHT_WAIT_RETRIES: 20
  # period to wait before retrying
  HEIGHT_WAIT_PERIOD: 15
  NODES: "--nodes=8 --snarkers=1 --prods=3 --prod0s=3 --seeds=2"
  OM: helm/openmina-config

steps:

- name: clone
  image: alpine/git
  commands:
  - git clone $${OPENMINA_REPO:-https://github.com/openmina/mina} --depth 1 -b $${OPENMINA_BRANCH:-openmina-legacy-snark-workers} .

- name: configure
  image: alpine/k8s:1.26.1
  environment:
    DRONE_KUBECONFIG:
      from_secret: k8s_config
    KUBECONFIG: kube-config
  commands:
  - umask 0077
  - echo "$DRONE_KUBECONFIG" > "$KUBECONFIG"
  - kubectl config set-context --current --namespace $${NAMESPACE:-testnet}

- name: pre-split
  image: openmina/mina-network-debugger:latest
  environment:
    URL: http://1.k8.openmina.com:31308
  commands:
  - sleep  10 && topology-tool --url=$URL $$NODES show-graph --expected-components 1

- name: split
  image: openmina/mina-network-debugger:latest
  environment:
    URL: http://1.k8.openmina.com:31308
  commands:
  - sleep  10 && topology-tool --url=$URL $$NODES enable-firewall
  - sleep  240 && topology-tool --url=$URL $$NODES show-graph --expected-components 2

- name: wait-and-assert-split
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - $${OM}/kube-utils.sh mina-node-wait-for-epoch-slot deploy/prod2 $${NAMESPACE:-testnet} 0 10
  - $${OM}/kube-utils.sh assert-different-history  deploy/prod2 $${NAMESPACE:-testnet} deploy/prod3 $${NAMESPACE:-testnet}


- name: merge
  image: openmina/mina-network-debugger:latest
  environment:
    URL: http://1.k8.openmina.com:31308
  commands:
  - topology-tool --url=$URL $$NODES show-graph --expected-components 2
  - topology-tool --url=$URL $$NODES disable-firewall # wait 30 minutes before disable firewall
  - sleep 240 && topology-tool --url=$URL $$NODES show-graph --expected-components 1

- name: assert-no-split
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - $${OM}/kube-utils.sh mina-testnet-same-chain $${HEIGHT_WAIT_RETRIES} $${HEIGHT_WAIT_PERIOD} $${NAMESPACE:-testnet}

---

kind: pipeline
name: run-zkapps
type: docker
clone:
  disable: true
depends_on: [ deploy-to-cluster ]

environment:
  # path to openmina tooling
  OM: helm/openmina-config
  RELEASE_NAME: zkapps-drone-${DRONE_BUILD_NUMBER}
  SUFFIX: ${DRONE_BUILD_NUMBER}

steps:

- name: clone
  image: alpine/git
  commands:
  - git clone $${OPENMINA_REPO:-https://github.com/openmina/mina} --depth 1 -b $${OPENMINA_BRANCH:-openmina-legacy-snark-workers} .

- name: configure
  image: alpine/k8s:1.26.1
  environment:
    DRONE_KUBECONFIG:
      from_secret: k8s_config
    KUBECONFIG: kube-config
  commands:
  - umask 0077
  - echo "$DRONE_KUBECONFIG" > "$KUBECONFIG"
  - kubectl config set-context --current --namespace $${NAMESPACE:-testnet}


- name: start
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - helm install $${RELEASE_NAME} helm/zkapps --set=job=$${ZK_JOB:-sign-x4} --set=count=$${ZK_COUNT:-512} --set=workers=$${ZK_WORKERS:-8} --set=suffix=$${SUFFIX}
  - |
    for t in $(seq 10); do
        kubectl logs jobs/zkapp-worker-$${SUFFIX} --container=worker --follow && exit
        echo "Waiting for worker container..."
        sleep 5
    done
    echo "Failed to wait for worker container"
    exit
  - $${OM}/kube-utils.sh wait-for-job-status job/zkapp-worker-$${SUFFIX} 60m
  - helm delete $${RELEASE_NAME}

---
kind: pipeline
name: finish
type: docker
clone:
  disable: true
depends_on: [ run-zkapps ]

environment:
  # path to openmina tooling
  OM: helm/openmina-config
  # global slot to wait force
  MAX_HEIGHT: 20

steps:

- name: clone
  image: alpine/git
  commands:
  - git clone $${OPENMINA_REPO:-https://github.com/openmina/mina} --depth 1 -b $${OPENMINA_BRANCH:-openmina-legacy-snark-workers} .

- name: configure
  image: alpine/k8s:1.26.1
  environment:
    DRONE_KUBECONFIG:
      from_secret: k8s_config
    KUBECONFIG: kube-config
  commands:
  - umask 0077
  - echo "$DRONE_KUBECONFIG" > "$KUBECONFIG"
  - kubectl config set-context --current --namespace $${NAMESPACE:-testnet}

- name: wait-for-slot
  image: alpine/k8s:1.26.1
  environment:
    KUBECONFIG: kube-config
  commands:
  - |
    while true; do
      HEIGHT=$$($${OM}/kube-utils.sh mina-node-chain-height deploy/node1)
      if [ -n "$HEIGHT" ] && [ "$HEIGHT" -ge "$MAX_HEIGHT" ]; then
        echo "Reached height $MAX_HEIGHT"
        exit
      fi
      echo "Height $HEIGHT is lower than $MAX_HEIGHT"
      sleep 20
    done

- name: report-finish
  image: busybox
  commands:
  - echo "Done"
